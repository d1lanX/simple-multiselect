class SimpleMultiselect extends HTMLElement{css='<style>\n    .multiselect {\n      padding: 5px;\n      cursor: pointer;\n    }\n    input[type="search"] {\n      width: 100%;\n      padding: .5rem;\n      border: 1px solid lightgray;\n    }\n    .selected {\n      display: none;\n      min-height: 2rem;\n      border: 1px solid lightgray;\n      align-items: center;\n      justify-content: start;\n      padding: .1em .5em;\n      gap: .7rem;\n      flex-wrap: wrap;\n    }\n    .selected-option {\n      background-color: gray;\n      color: white;\n      padding: 0 1rem;\n      border-radius: 3px;\n    }\n    .options {\n      display: none;\n      border: 1px solid #ccc;\n      padding: 10px;\n      max-height: 150px;\n      overflow-y: auto;\n    }\n    ::slotted(option) {\n      padding: 5px;\n      cursor: pointer;\n      margin: .5rem 0;\n    }\n    ::slotted(option:hover) {\n      background-color: #eee;\n    }\n    .multiselect.open .options {\n      display: block;\n    }\n  </style>'.trim();static formAssociated=!0;constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this._value=[],this._selectedOptions=new Map,this._internals=this.attachInternals()}connectedCallback(){this.render()}render(){this.html=`\n    <div class="multiselect">\n      <div class="selected"></div>\n      <input type="search" id="_multi-search" placeholder="${this.getAttribute("placeholder")||"Seleccione"}">\n      <div class="options">\n        <slot></slot>\n      </div>\n    </div>`.trim(),this.shadow.innerHTML=`${this.css}${this.html}`,this.container=this.shadow.querySelector(".multiselect"),this.options=this.shadow.querySelector(".options"),this.selected=this.shadow.querySelector(".selected"),this.input=this.shadow.getElementById("_multi-search"),this._slot=this.shadow.querySelector("slot"),this.input.addEventListener("input",this.searchOptions.bind(this)),this.selected.addEventListener("click",this.handleOptionSelected.bind(this)),this.options.addEventListener("click",this.handleOptionSelected.bind(this)),document.addEventListener("click",this.handleClick.bind(this,this.container))}handleClick(e,t){const s=e.getBoundingClientRect();t.clientX<s.left||t.clientX>s.right||t.clientY<s.top||t.clientY>s.bottom?(e.classList.remove("open"),this._selectedOptions.size>0&&(this.selected.style.display="flex",this.input.type="hidden")):(e.classList.add("open"),this.input.type="search",this.input.focus())}handleOptionSelected(e){e.target.matches("span")&&this.restoreOption(e.target),e.target.matches("option")&&this.setSelected(e.target)}setSelected(e){const t=e.value,s=e.textContent;this._selectedOptions.set(t,{text:s,value:t}),e.remove(),e=null,this.renderSelectedOptions()}restoreOption(e){const t=e.dataset.value,s=e.dataset.text;this.appendChild(new Option(s,t)),this._selectedOptions.delete(t),e.remove(),e=null,this.renderSelectedOptions()}searchOptions(e){const t=e.target.value;t?this._slot.assignedElements({flatten:!0}).forEach((e=>{e.textContent.toLowerCase().includes(t.toLowerCase())?e.style.display="block":e.style.display="none"})):this._slot.assignedElements({flatten:!0}).forEach((e=>e.style.display="block"))}renderSelectedOptions(){const e=new DocumentFragment;this._value=[],this._selectedOptions.forEach((t=>{const s=document.createElement("span");s.dataset.value=t.value,s.dataset.text=t.text,s.className="selected-option",s.textContent=t.text,e.append(s),this._value.push(t.value)})),this._internals.setFormValue(this._value),this.selected.innerHTML="",this.selected.append(e),this._selectedOptions.size>0?this.selected.style.display="flex":(this.selected.style.display="none",this.input.type="search")}disconnectedCallback(){document.removeEventListener("click",this.handleClick.bind(this,this.container))}get value(){return this._value}set value(e){this._value=e}get name(){return this.getAttribute("name")}}window.customElements.define("multi-select",SimpleMultiselect);